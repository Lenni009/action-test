import{AttributeAction,SelectorType}from"css-what";const procedure=new Map([[SelectorType.Universal,50],[SelectorType.Tag,30],[SelectorType.Attribute,1],[SelectorType.Pseudo,0]]);export function isTraversal(t){return!procedure.has(t.type)}const attributes=new Map([[AttributeAction.Exists,10],[AttributeAction.Equals,8],[AttributeAction.Not,7],[AttributeAction.Start,6],[AttributeAction.End,6],[AttributeAction.Any,5]]);export default function sortByProcedure(t){const e=t.map(getProcedure);for(let r=1;r<t.length;r++){const o=e[r];if(!(o<0))for(let n=r-1;n>=0&&o<e[n];n--){const r=t[n+1];t[n+1]=t[n],t[n]=r,e[n+1]=e[n],e[n]=o}}}function getProcedure(t){var e,r;let o=null!==(e=procedure.get(t.type))&&void 0!==e?e:-1;return t.type===SelectorType.Attribute?(o=null!==(r=attributes.get(t.action))&&void 0!==r?r:4,t.action===AttributeAction.Equals&&"id"===t.name&&(o=9),t.ignoreCase&&(o>>=1)):t.type===SelectorType.Pseudo&&(t.data?"has"===t.name||"contains"===t.name?o=0:Array.isArray(t.data)?(o=Math.min(...t.data.map((t=>Math.min(...t.map(getProcedure))))),o<0&&(o=0)):o=2:o=3),o}
