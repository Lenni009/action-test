import{attributeRules}from"./attributes.js";import{compilePseudoSelector}from"./pseudo-selectors/index.js";import{SelectorType}from"css-what";function getElementParent(e,t){const r=t.getParent(e);return r&&t.isTag(r)?r:null}export function compileGeneralSelector(e,t,r,n,o){const{adapter:s,equals:a}=r;switch(t.type){case SelectorType.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case SelectorType.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case SelectorType.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return r.xmlMode&&!r.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),attributeRules[t.action](e,t,r);case SelectorType.Pseudo:return compilePseudoSelector(e,t,r,n,o);case SelectorType.Tag:{if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");let{name:n}=t;return r.xmlMode&&!r.lowerCaseTags||(n=n.toLowerCase()),function(t){return s.getName(t)===n&&e(t)}}case SelectorType.Descendant:{if(!1===r.cacheResults||"undefined"==typeof WeakSet)return function(t){let r=t;for(;r=getElementParent(r,s);)if(e(r))return!0;return!1};const t=new WeakSet;return function(r){let n=r;for(;n=getElementParent(n,s);)if(!t.has(n)){if(s.isTag(n)&&e(n))return!0;t.add(n)}return!1}}case"_flexibleDescendant":return function(t){let r=t;do{if(e(r))return!0}while(r=getElementParent(r,s));return!1};case SelectorType.Parent:return function(t){return s.getChildren(t).some((t=>s.isTag(t)&&e(t)))};case SelectorType.Child:return function(t){const r=s.getParent(t);return null!=r&&s.isTag(r)&&e(r)};case SelectorType.Sibling:return function(t){const r=s.getSiblings(t);for(let n=0;n<r.length;n++){const o=r[n];if(a(t,o))break;if(s.isTag(o)&&e(o))return!0}return!1};case SelectorType.Adjacent:return s.prevElementSibling?function(t){const r=s.prevElementSibling(t);return null!=r&&e(r)}:function(t){const r=s.getSiblings(t);let n;for(let e=0;e<r.length;e++){const o=r[e];if(a(t,o))break;s.isTag(o)&&(n=o)}return!!n&&e(n)};case SelectorType.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}
