export const pseudos={empty:(e,{adapter:t})=>!t.getChildren(e).some((e=>t.isTag(e)||""!==t.getText(e))),"first-child"(e,{adapter:t,equals:r}){if(t.prevElementSibling)return null==t.prevElementSibling(e);const n=t.getSiblings(e).find((e=>t.isTag(e)));return null!=n&&r(e,n)},"last-child"(e,{adapter:t,equals:r}){const n=t.getSiblings(e);for(let s=n.length-1;s>=0;s--){if(r(e,n[s]))return!0;if(t.isTag(n[s]))break}return!1},"first-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),s=t.getName(e);for(let a=0;a<n.length;a++){const i=n[a];if(r(e,i))return!0;if(t.isTag(i)&&t.getName(i)===s)break}return!1},"last-of-type"(e,{adapter:t,equals:r}){const n=t.getSiblings(e),s=t.getName(e);for(let a=n.length-1;a>=0;a--){const i=n[a];if(r(e,i))return!0;if(t.isTag(i)&&t.getName(i)===s)break}return!1},"only-of-type"(e,{adapter:t,equals:r}){const n=t.getName(e);return t.getSiblings(e).every((s=>r(e,s)||!t.isTag(s)||t.getName(s)!==n))},"only-child":(e,{adapter:t,equals:r})=>t.getSiblings(e).every((n=>r(e,n)||!t.isTag(n)))};export function verifyPseudoArgs(e,t,r,n){if(null===r){if(e.length>n)throw new Error(`Pseudo-class :${t} requires an argument`)}else if(e.length===n)throw new Error(`Pseudo-class :${t} doesn't have any arguments`)}
