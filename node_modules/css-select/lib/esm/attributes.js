import boolbase from"boolbase";const reChars=/[-[\]{}()*+?.,\\^$|#\s]/g;function escapeRegex(e){return e.replace(reChars,"\\$&")}const caseInsensitiveAttributes=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function shouldIgnoreCase(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&caseInsensitiveAttributes.has(e.name)}export const attributeRules={equals(e,t,n){const{adapter:r}=n,{name:a}=t;let{value:s}=t;return shouldIgnoreCase(t,n)?(s=s.toLowerCase(),t=>{const n=r.getAttributeValue(t,a);return null!=n&&n.length===s.length&&n.toLowerCase()===s&&e(t)}):t=>r.getAttributeValue(t,a)===s&&e(t)},hyphen(e,t,n){const{adapter:r}=n,{name:a}=t;let{value:s}=t;const o=s.length;return shouldIgnoreCase(t,n)?(s=s.toLowerCase(),function(t){const n=r.getAttributeValue(t,a);return null!=n&&(n.length===o||"-"===n.charAt(o))&&n.substr(0,o).toLowerCase()===s&&e(t)}):function(t){const n=r.getAttributeValue(t,a);return null!=n&&(n.length===o||"-"===n.charAt(o))&&n.substr(0,o)===s&&e(t)}},element(e,t,n){const{adapter:r}=n,{name:a,value:s}=t;if(/\s/.test(s))return boolbase.falseFunc;const o=new RegExp(`(?:^|\\s)${escapeRegex(s)}(?:$|\\s)`,shouldIgnoreCase(t,n)?"i":"");return function(t){const n=r.getAttributeValue(t,a);return null!=n&&n.length>=s.length&&o.test(n)&&e(t)}},exists:(e,{name:t},{adapter:n})=>r=>n.hasAttrib(r,t)&&e(r),start(e,t,n){const{adapter:r}=n,{name:a}=t;let{value:s}=t;const o=s.length;return 0===o?boolbase.falseFunc:shouldIgnoreCase(t,n)?(s=s.toLowerCase(),t=>{const n=r.getAttributeValue(t,a);return null!=n&&n.length>=o&&n.substr(0,o).toLowerCase()===s&&e(t)}):t=>{var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.startsWith(s))&&e(t)}},end(e,t,n){const{adapter:r}=n,{name:a}=t;let{value:s}=t;const o=-s.length;return 0===o?boolbase.falseFunc:shouldIgnoreCase(t,n)?(s=s.toLowerCase(),t=>{var n;return(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.substr(o).toLowerCase())===s&&e(t)}):t=>{var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.endsWith(s))&&e(t)}},any(e,t,n){const{adapter:r}=n,{name:a,value:s}=t;if(""===s)return boolbase.falseFunc;if(shouldIgnoreCase(t,n)){const t=new RegExp(escapeRegex(s),"i");return function(n){const o=r.getAttributeValue(n,a);return null!=o&&o.length>=s.length&&t.test(o)&&e(n)}}return t=>{var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.includes(s))&&e(t)}},not(e,t,n){const{adapter:r}=n,{name:a}=t;let{value:s}=t;return""===s?t=>!!r.getAttributeValue(t,a)&&e(t):shouldIgnoreCase(t,n)?(s=s.toLowerCase(),t=>{const n=r.getAttributeValue(t,a);return(null==n||n.length!==s.length||n.toLowerCase()!==s)&&e(t)}):t=>r.getAttributeValue(t,a)!==s&&e(t)}};
