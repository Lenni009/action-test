import*as DomUtils from"domutils";import boolbase from"boolbase";import{compile as compileRaw,compileUnsafe,compileToken}from"./compile.js";import{getNextSiblings}from"./pseudo-selectors/subselects.js";const defaultEquals=(e,t)=>e===t,defaultOptions={adapter:DomUtils,equals:defaultEquals};function convertOptionFormats(e){var t,o,n,l;const s=null!=e?e:defaultOptions;return null!==(t=s.adapter)&&void 0!==t||(s.adapter=DomUtils),null!==(o=s.equals)&&void 0!==o||(s.equals=null!==(l=null===(n=s.adapter)||void 0===n?void 0:n.equals)&&void 0!==l?l:defaultEquals),s}function wrapCompile(e){return function(t,o,n){const l=convertOptionFormats(o);return e(t,l,n)}}export const compile=wrapCompile(compileRaw);export const _compileUnsafe=wrapCompile(compileUnsafe);export const _compileToken=wrapCompile(compileToken);function getSelectorFunc(e){return function(t,o,n){const l=convertOptionFormats(n);"function"!=typeof t&&(t=compileUnsafe(t,l,o));const s=prepareContext(o,l.adapter,t.shouldTestNextSiblings);return e(t,s,l)}}export function prepareContext(e,t,o=!1){return o&&(e=appendNextSiblings(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}function appendNextSiblings(e,t){const o=Array.isArray(e)?e.slice(0):[e],n=o.length;for(let e=0;e<n;e++){const n=getNextSiblings(o[e],t);o.push(...n)}return o}export const selectAll=getSelectorFunc(((e,t,o)=>e!==boolbase.falseFunc&&t&&0!==t.length?o.adapter.findAll(e,t):[]));export const selectOne=getSelectorFunc(((e,t,o)=>e!==boolbase.falseFunc&&t&&0!==t.length?o.adapter.findOne(e,t):null));export function is(e,t,o){const n=convertOptionFormats(o);return("function"==typeof t?t:compileRaw(t,n))(e)}export default selectAll;export{filters,pseudos,aliases}from"./pseudo-selectors/index.js";
